{"ast":null,"code":"Object.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = extractTransform;\nexports.props2transform = props2transform;\nexports.transformToMatrix = transformToMatrix;\nexports.transformsArrayToProps = transformsArrayToProps;\nvar _Matrix2D = require(\"../Matrix2D\");\nvar _transform = require(\"./transform\");\nfunction appendTransformProps(props) {\n  var x = props.x,\n    y = props.y,\n    originX = props.originX,\n    originY = props.originY,\n    scaleX = props.scaleX,\n    scaleY = props.scaleY,\n    rotation = props.rotation,\n    skewX = props.skewX,\n    skewY = props.skewY;\n  (0, _Matrix2D.appendTransform)(x + originX, y + originY, scaleX, scaleY, rotation, skewX, skewY, originX, originY);\n}\nfunction universal2axis(universal, axisX, axisY, defaultValue) {\n  var x;\n  var y;\n  if (typeof universal === 'number') {\n    x = y = universal;\n  } else if (typeof universal === 'string') {\n    var coords = universal.split(/\\s*,\\s*/);\n    if (coords.length === 2) {\n      x = +coords[0];\n      y = +coords[1];\n    } else if (coords.length === 1) {\n      x = y = +coords[0];\n    }\n  } else if (Array.isArray(universal)) {\n    if (universal.length === 2) {\n      x = +universal[0];\n      y = +universal[1];\n    } else if (universal.length === 1) {\n      x = y = +universal[0];\n    }\n  }\n  axisX = +axisX;\n  if (!isNaN(axisX)) {\n    x = axisX;\n  }\n  axisY = +axisY;\n  if (!isNaN(axisY)) {\n    y = axisY;\n  }\n  return [x || defaultValue || 0, y || defaultValue || 0];\n}\nfunction transformsArrayToProps(transformObjectsArray) {\n  var props = {};\n  transformObjectsArray === null || transformObjectsArray === void 0 ? void 0 : transformObjectsArray.forEach(function (transformObject) {\n    var keys = Object.keys(transformObject);\n    if (keys.length !== 1) {\n      console.error('You must specify exactly one property per transform object.');\n    }\n    var key = keys[0];\n    var value = transformObject[key];\n    props[key] = value;\n  });\n  return props;\n}\nfunction props2transform(props) {\n  if (!props) {\n    return null;\n  }\n  var extractedProps = Array.isArray(props) ? transformsArrayToProps(props) : props;\n  var rotation = extractedProps.rotation,\n    translate = extractedProps.translate,\n    translateX = extractedProps.translateX,\n    translateY = extractedProps.translateY,\n    origin = extractedProps.origin,\n    originX = extractedProps.originX,\n    originY = extractedProps.originY,\n    scale = extractedProps.scale,\n    scaleX = extractedProps.scaleX,\n    scaleY = extractedProps.scaleY,\n    skew = extractedProps.skew,\n    skewX = extractedProps.skewX,\n    skewY = extractedProps.skewY,\n    x = extractedProps.x,\n    y = extractedProps.y;\n  if (rotation == null && translate == null && translateX == null && translateY == null && origin == null && originX == null && originY == null && scale == null && scaleX == null && scaleY == null && skew == null && skewX == null && skewY == null && x == null && y == null) {\n    return null;\n  }\n  if (Array.isArray(x) || Array.isArray(y)) {\n    console.warn('Passing SvgLengthList to x or y attribute where SvgLength expected');\n  }\n  var tr = universal2axis(translate, translateX || (Array.isArray(x) ? x[0] : x), translateY || (Array.isArray(y) ? y[0] : y));\n  var or = universal2axis(origin, originX, originY);\n  var sc = universal2axis(scale, scaleX, scaleY, 1);\n  var sk = universal2axis(skew, skewX, skewY);\n  return {\n    rotation: rotation == null ? 0 : +rotation || 0,\n    originX: or[0],\n    originY: or[1],\n    scaleX: sc[0],\n    scaleY: sc[1],\n    skewX: sk[0],\n    skewY: sk[1],\n    x: tr[0],\n    y: tr[1]\n  };\n}\nfunction transformToMatrix(props, transform) {\n  if (!props && !transform) {\n    return null;\n  }\n  (0, _Matrix2D.reset)();\n  props && appendTransformProps(props);\n  if (transform) {\n    if (Array.isArray(transform)) {\n      if (typeof transform[0] === 'number') {\n        var columnMatrix = transform;\n        (0, _Matrix2D.append)(columnMatrix[0], columnMatrix[1], columnMatrix[2], columnMatrix[3], columnMatrix[4], columnMatrix[5]);\n      } else {\n        var transformProps = props2transform(transformsArrayToProps(transform));\n        transformProps && appendTransformProps(transformProps);\n      }\n    } else if (typeof transform === 'string') {\n      try {\n        var t = (0, _transform.parse)(transform);\n        (0, _Matrix2D.append)(t[0], t[3], t[1], t[4], t[2], t[5]);\n      } catch (e) {\n        console.error(e);\n      }\n    } else {\n      var _transformProps = props2transform(transform);\n      _transformProps && appendTransformProps(_transformProps);\n    }\n  }\n  return (0, _Matrix2D.toArray)();\n}\nfunction extractTransform(props) {\n  if (Array.isArray(props) && typeof props[0] === 'number') {\n    return props;\n  }\n  if (typeof props === 'string') {\n    try {\n      var t = (0, _transform.parse)(props);\n      return [t[0], t[3], t[1], t[4], t[2], t[5]];\n    } catch (e) {\n      console.error(e);\n      return _Matrix2D.identity;\n    }\n  }\n  var transformProps = props;\n  return transformToMatrix(props2transform(transformProps), transformProps === null || transformProps === void 0 ? void 0 : transformProps.transform);\n}","map":{"version":3,"mappings":"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","names":["appendTransformProps","props","x","y","originX","originY","scaleX","scaleY","rotation","skewX","skewY","universal2axis","universal","axisX","axisY","defaultValue","coords","split","length","Array","isArray","isNaN","transformsArrayToProps","transformObjectsArray","forEach","transformObject","keys","Object","console","error","key","value","props2transform","extractedProps","translate","translateX","translateY","origin","scale","skew","warn","tr","or","sc","sk","transformToMatrix","transform","columnMatrix","transformProps","t","e","extractTransform","identity"],"sources":["extractTransform.ts"],"sourcesContent":["import { TransformsStyle } from 'react-native';\nimport { append, appendTransform, identity, reset, toArray } from '../Matrix2D';\nimport { parse } from './transform';\nimport {\n  ColumnMajorTransformMatrix,\n  NumberProp,\n  TransformedProps,\n  TransformProps,\n} from './types';\n\nfunction appendTransformProps(props: TransformedProps) {\n  const { x, y, originX, originY, scaleX, scaleY, rotation, skewX, skewY } =\n    props;\n  appendTransform(\n    x + originX,\n    y + originY,\n    scaleX,\n    scaleY,\n    rotation,\n    skewX,\n    skewY,\n    originX,\n    originY,\n  );\n}\n\nfunction universal2axis(\n  universal: NumberProp | NumberProp[] | undefined,\n  axisX: NumberProp | void,\n  axisY: NumberProp | void,\n  defaultValue?: number,\n): [number, number] {\n  let x;\n  let y;\n  if (typeof universal === 'number') {\n    x = y = universal;\n  } else if (typeof universal === 'string') {\n    const coords = universal.split(/\\s*,\\s*/);\n    if (coords.length === 2) {\n      x = +coords[0];\n      y = +coords[1];\n    } else if (coords.length === 1) {\n      x = y = +coords[0];\n    }\n  } else if (Array.isArray(universal)) {\n    if (universal.length === 2) {\n      x = +universal[0];\n      y = +universal[1];\n    } else if (universal.length === 1) {\n      x = y = +universal[0];\n    }\n  }\n\n  axisX = +axisX;\n  if (!isNaN(axisX)) {\n    x = axisX;\n  }\n\n  axisY = +axisY;\n  if (!isNaN(axisY)) {\n    y = axisY;\n  }\n\n  return [x || defaultValue || 0, y || defaultValue || 0];\n}\n\nexport function transformsArrayToProps(\n  transformObjectsArray: TransformsStyle['transform'],\n) {\n  const props: TransformProps = {};\n  transformObjectsArray?.forEach((transformObject) => {\n    const keys = Object.keys(transformObject);\n    if (keys.length !== 1) {\n      console.error(\n        'You must specify exactly one property per transform object.',\n      );\n    }\n    const key = keys[0] as keyof TransformProps;\n    const value = transformObject[key as keyof typeof transformObject];\n    props[key] = value;\n  });\n  return props;\n}\n\nexport function props2transform(\n  props: TransformProps | undefined,\n): TransformedProps | null {\n  if (!props) {\n    return null;\n  }\n  const extractedProps = Array.isArray(props)\n    ? transformsArrayToProps(props)\n    : props;\n  const {\n    rotation,\n    translate,\n    translateX,\n    translateY,\n    origin,\n    originX,\n    originY,\n    scale,\n    scaleX,\n    scaleY,\n    skew,\n    skewX,\n    skewY,\n    x,\n    y,\n  } = extractedProps;\n  if (\n    rotation == null &&\n    translate == null &&\n    translateX == null &&\n    translateY == null &&\n    origin == null &&\n    originX == null &&\n    originY == null &&\n    scale == null &&\n    scaleX == null &&\n    scaleY == null &&\n    skew == null &&\n    skewX == null &&\n    skewY == null &&\n    x == null &&\n    y == null\n  ) {\n    return null;\n  }\n\n  if (Array.isArray(x) || Array.isArray(y)) {\n    console.warn(\n      'Passing SvgLengthList to x or y attribute where SvgLength expected',\n    );\n  }\n  const tr = universal2axis(\n    translate,\n    translateX || (Array.isArray(x) ? x[0] : x),\n    translateY || (Array.isArray(y) ? y[0] : y),\n  );\n  const or = universal2axis(origin, originX, originY);\n  const sc = universal2axis(scale, scaleX, scaleY, 1);\n  const sk = universal2axis(skew, skewX, skewY);\n\n  return {\n    rotation: rotation == null ? 0 : +rotation || 0,\n    originX: or[0],\n    originY: or[1],\n    scaleX: sc[0],\n    scaleY: sc[1],\n    skewX: sk[0],\n    skewY: sk[1],\n    x: tr[0],\n    y: tr[1],\n  };\n}\n\nexport function transformToMatrix(\n  props: TransformedProps | null,\n  transform: TransformProps['transform'],\n): ColumnMajorTransformMatrix | null {\n  if (!props && !transform) {\n    return null;\n  }\n  reset();\n  props && appendTransformProps(props);\n\n  if (transform) {\n    if (Array.isArray(transform)) {\n      if (typeof transform[0] === 'number') {\n        const columnMatrix = transform as ColumnMajorTransformMatrix;\n        append(\n          columnMatrix[0],\n          columnMatrix[1],\n          columnMatrix[2],\n          columnMatrix[3],\n          columnMatrix[4],\n          columnMatrix[5],\n        );\n      } else {\n        const transformProps = props2transform(\n          transformsArrayToProps(transform as TransformsStyle['transform']),\n        );\n        transformProps && appendTransformProps(transformProps);\n      }\n    } else if (typeof transform === 'string') {\n      try {\n        const t = parse(transform);\n        append(t[0], t[3], t[1], t[4], t[2], t[5]);\n      } catch (e) {\n        console.error(e);\n      }\n    } else {\n      const transformProps = props2transform(transform);\n      transformProps && appendTransformProps(transformProps);\n    }\n  }\n\n  return toArray();\n}\n\nexport default function extractTransform(\n  props: TransformProps | TransformProps['transform'],\n): ColumnMajorTransformMatrix | null {\n  if (Array.isArray(props) && typeof props[0] === 'number') {\n    return props as ColumnMajorTransformMatrix;\n  }\n  if (typeof props === 'string') {\n    try {\n      const t = parse(props);\n      return [t[0], t[3], t[1], t[4], t[2], t[5]];\n    } catch (e) {\n      console.error(e);\n      return identity;\n    }\n  }\n  // this type is not correct since props can be of type TransformsStyle['transform'] too\n  // but it satisfies TS and should not produce any type errors\n  const transformProps = props as TransformProps;\n  return transformToMatrix(\n    props2transform(transformProps),\n    transformProps?.transform,\n  );\n}\n"]},"metadata":{},"sourceType":"script"}