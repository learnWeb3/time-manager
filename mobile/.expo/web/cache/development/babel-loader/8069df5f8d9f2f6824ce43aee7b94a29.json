{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nexport var validateEmail = function validateEmail(key, value) {\n  var errors = [];\n  var _validateRequired = validateRequired(key, value),\n    requiredFieldErrors = _validateRequired.errors;\n  errors.push.apply(errors, _toConsumableArray(requiredFieldErrors));\n  if (value) {\n    var regex = new RegExp(/^[a-zA-Z0-1]+@.+\\..{2,3}$/);\n    if (!regex.test(value)) {\n      errors.push(\"invalid email format for \" + key);\n    }\n  }\n  return {\n    errors: errors,\n    isValid: errors.length === 0\n  };\n};\nexport var validatePassword = function validatePassword(key, value) {\n  var errors = [];\n  var _validateRequired2 = validateRequired(key, value),\n    requiredFieldErrors = _validateRequired2.errors;\n  errors.push.apply(errors, _toConsumableArray(requiredFieldErrors));\n  return {\n    errors: errors,\n    isValid: errors.length === 0\n  };\n};\nexport var validateRequired = function validateRequired(key, value) {\n  var errors = [];\n  if (value === null || value === undefined || value === \"\") {\n    errors.push(\"missing required value for \" + key);\n  }\n  return {\n    errors: errors,\n    isValid: errors.length === 0\n  };\n};","map":{"version":3,"names":["validateEmail","key","value","errors","validateRequired","requiredFieldErrors","push","regex","RegExp","test","isValid","length","validatePassword","undefined"],"sources":["/Users/antoine/Documents/EPITECH/time-manager-/mobile/validators/index.js"],"sourcesContent":["export const validateEmail = (key, value) => {\n    const errors = []\n    const {\n        errors: requiredFieldErrors,\n    } = validateRequired(key, value)\n    errors.push(...requiredFieldErrors)\n    if (value) {\n        const regex = new RegExp(/^[a-zA-Z0-1]+@.+\\..{2,3}$/)\n        if (!regex.test(value)) {\n            errors.push(`invalid email format for ${key}`)\n        }\n    }\n    return {\n        errors,\n        isValid: errors.length === 0\n    }\n}\n\nexport const validatePassword = (key, value) => {\n    const errors = []\n    const {\n        errors: requiredFieldErrors,\n    } = validateRequired(key, value)\n    errors.push(...requiredFieldErrors)\n    // if (value && value.length) {\n    //     const minPasswordLength = 6\n    //     if (value.length < minPasswordLength) {\n    //         errors.push(`invalid password format for ${key}, must be least ${minPasswordLength} characters`)\n    //     }\n    // }\n    return {\n        errors,\n        isValid: errors.length === 0\n    }\n}\n\nexport const validateRequired = (key, value) => {\n    const errors = [];\n    if (value === null || value === undefined || value === \"\") {\n        errors.push(`missing required value for ${key}`)\n    }\n    return {\n        errors,\n        isValid: errors.length === 0\n    }\n}"],"mappings":";AAAA,OAAO,IAAMA,aAAa,GAAG,SAAhBA,aAAa,CAAIC,GAAG,EAAEC,KAAK,EAAK;EACzC,IAAMC,MAAM,GAAG,EAAE;EACjB,wBAEIC,gBAAgB,CAACH,GAAG,EAAEC,KAAK,CAAC;IADpBG,mBAAmB,qBAA3BF,MAAM;EAEVA,MAAM,CAACG,IAAI,OAAXH,MAAM,qBAASE,mBAAmB,EAAC;EACnC,IAAIH,KAAK,EAAE;IACP,IAAMK,KAAK,GAAG,IAAIC,MAAM,CAAC,2BAA2B,CAAC;IACrD,IAAI,CAACD,KAAK,CAACE,IAAI,CAACP,KAAK,CAAC,EAAE;MACpBC,MAAM,CAACG,IAAI,+BAA6BL,GAAG,CAAG;IAClD;EACJ;EACA,OAAO;IACHE,MAAM,EAANA,MAAM;IACNO,OAAO,EAAEP,MAAM,CAACQ,MAAM,KAAK;EAC/B,CAAC;AACL,CAAC;AAED,OAAO,IAAMC,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAIX,GAAG,EAAEC,KAAK,EAAK;EAC5C,IAAMC,MAAM,GAAG,EAAE;EACjB,yBAEIC,gBAAgB,CAACH,GAAG,EAAEC,KAAK,CAAC;IADpBG,mBAAmB,sBAA3BF,MAAM;EAEVA,MAAM,CAACG,IAAI,OAAXH,MAAM,qBAASE,mBAAmB,EAAC;EAOnC,OAAO;IACHF,MAAM,EAANA,MAAM;IACNO,OAAO,EAAEP,MAAM,CAACQ,MAAM,KAAK;EAC/B,CAAC;AACL,CAAC;AAED,OAAO,IAAMP,gBAAgB,GAAG,SAAnBA,gBAAgB,CAAIH,GAAG,EAAEC,KAAK,EAAK;EAC5C,IAAMC,MAAM,GAAG,EAAE;EACjB,IAAID,KAAK,KAAK,IAAI,IAAIA,KAAK,KAAKW,SAAS,IAAIX,KAAK,KAAK,EAAE,EAAE;IACvDC,MAAM,CAACG,IAAI,iCAA+BL,GAAG,CAAG;EACpD;EACA,OAAO;IACHE,MAAM,EAANA,MAAM;IACNO,OAAO,EAAEP,MAAM,CAACQ,MAAM,KAAK;EAC/B,CAAC;AACL,CAAC"},"metadata":{},"sourceType":"module"}