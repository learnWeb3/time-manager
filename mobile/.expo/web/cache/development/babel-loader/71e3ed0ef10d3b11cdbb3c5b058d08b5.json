{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/objectWithoutProperties\";\nvar _excluded = [\"disabled\", \"editable\", \"label\", \"error\", \"selectionColor\", \"underlineColor\", \"underlineStyle\", \"activeUnderlineColor\", \"textColor\", \"dense\", \"style\", \"theme\", \"render\", \"multiline\", \"parentState\", \"innerRef\", \"onFocus\", \"forceFocus\", \"onBlur\", \"onChangeText\", \"onLayoutAnimatedText\", \"onLeftAffixLayoutChange\", \"onRightAffixLayoutChange\", \"left\", \"right\", \"placeholderTextColor\", \"testID\"],\n  _excluded2 = [\"fontSize\", \"lineHeight\", \"fontWeight\", \"height\", \"paddingHorizontal\", \"textAlign\"];\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport * as React from 'react';\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport I18nManager from \"react-native-web/dist/exports/I18nManager\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport NativeTextInput from \"react-native-web/dist/exports/TextInput\";\nimport View from \"react-native-web/dist/exports/View\";\nimport { useInternalTheme } from \"../../core/theming\";\nimport { AdornmentSide, AdornmentType, InputMode } from \"./Adornment/enums\";\nimport TextInputAdornment from \"./Adornment/TextInputAdornment\";\nimport { getAdornmentConfig, getAdornmentStyleAdjustmentForNativeInput } from \"./Adornment/TextInputAdornment\";\nimport { ADORNMENT_SIZE, LABEL_PADDING_TOP_DENSE, LABEL_WIGGLE_X_OFFSET, MAXIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_FONT_SIZE, MINIMIZED_LABEL_Y_OFFSET, MIN_DENSE_HEIGHT, MIN_DENSE_HEIGHT_WL } from \"./constants\";\nimport { adjustPaddingFlat, calculateFlatAffixTopPosition, calculateFlatInputHorizontalPadding, calculateInputHeight, calculateLabelTopPosition, calculatePadding, getConstants, getFlatInputColors, interpolatePlaceholder } from \"./helpers\";\nimport InputLabel from \"./Label/InputLabel\";\nvar TextInputFlat = function TextInputFlat(_ref) {\n  var _affixTopPosition, _onAffixChange, _topPosition;\n  var _ref$disabled = _ref.disabled,\n    disabled = _ref$disabled === void 0 ? false : _ref$disabled,\n    _ref$editable = _ref.editable,\n    editable = _ref$editable === void 0 ? true : _ref$editable,\n    label = _ref.label,\n    _ref$error = _ref.error,\n    error = _ref$error === void 0 ? false : _ref$error,\n    selectionColor = _ref.selectionColor,\n    underlineColor = _ref.underlineColor,\n    underlineStyle = _ref.underlineStyle,\n    activeUnderlineColor = _ref.activeUnderlineColor,\n    textColor = _ref.textColor,\n    dense = _ref.dense,\n    style = _ref.style,\n    theme = _ref.theme,\n    _ref$render = _ref.render,\n    render = _ref$render === void 0 ? function (props) {\n      return React.createElement(NativeTextInput, props);\n    } : _ref$render,\n    _ref$multiline = _ref.multiline,\n    multiline = _ref$multiline === void 0 ? false : _ref$multiline,\n    parentState = _ref.parentState,\n    innerRef = _ref.innerRef,\n    onFocus = _ref.onFocus,\n    forceFocus = _ref.forceFocus,\n    onBlur = _ref.onBlur,\n    onChangeText = _ref.onChangeText,\n    onLayoutAnimatedText = _ref.onLayoutAnimatedText,\n    onLeftAffixLayoutChange = _ref.onLeftAffixLayoutChange,\n    onRightAffixLayoutChange = _ref.onRightAffixLayoutChange,\n    left = _ref.left,\n    right = _ref.right,\n    placeholderTextColor = _ref.placeholderTextColor,\n    _ref$testID = _ref.testID,\n    testID = _ref$testID === void 0 ? 'text-input-flat' : _ref$testID,\n    rest = _objectWithoutProperties(_ref, _excluded);\n  var isAndroid = Platform.OS === 'android';\n  var colors = theme.colors,\n    isV3 = theme.isV3,\n    roundness = theme.roundness;\n  var font = isV3 ? theme.fonts.bodyLarge : theme.fonts.regular;\n  var hasActiveOutline = parentState.focused || error;\n  var _getConstants = getConstants(isV3),\n    LABEL_PADDING_TOP = _getConstants.LABEL_PADDING_TOP,\n    FLAT_INPUT_OFFSET = _getConstants.FLAT_INPUT_OFFSET,\n    MIN_HEIGHT = _getConstants.MIN_HEIGHT;\n  var _ref3 = StyleSheet.flatten(style) || {},\n    fontSizeStyle = _ref3.fontSize,\n    lineHeight = _ref3.lineHeight,\n    fontWeight = _ref3.fontWeight,\n    height = _ref3.height,\n    paddingHorizontal = _ref3.paddingHorizontal,\n    textAlign = _ref3.textAlign,\n    viewStyle = _objectWithoutProperties(_ref3, _excluded2);\n  var fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n  var isPaddingHorizontalPassed = paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n  var adornmentConfig = getAdornmentConfig({\n    left: left,\n    right: right\n  });\n  var _calculateFlatInputHo = calculateFlatInputHorizontalPadding({\n      adornmentConfig: adornmentConfig,\n      isV3: isV3\n    }),\n    paddingLeft = _calculateFlatInputHo.paddingLeft,\n    paddingRight = _calculateFlatInputHo.paddingRight;\n  if (isPaddingHorizontalPassed) {\n    paddingLeft = paddingHorizontal;\n    paddingRight = paddingHorizontal;\n  }\n  var leftLayout = parentState.leftLayout,\n    rightLayout = parentState.rightLayout;\n  var rightAffixWidth = right ? rightLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  var leftAffixWidth = left ? leftLayout.width || ADORNMENT_SIZE : ADORNMENT_SIZE;\n  var adornmentStyleAdjustmentForNativeInput = getAdornmentStyleAdjustmentForNativeInput({\n    adornmentConfig: adornmentConfig,\n    rightAffixWidth: rightAffixWidth,\n    leftAffixWidth: leftAffixWidth,\n    paddingHorizontal: paddingHorizontal,\n    inputOffset: FLAT_INPUT_OFFSET,\n    mode: InputMode.Flat,\n    isV3: isV3\n  });\n  var _getFlatInputColors = getFlatInputColors({\n      underlineColor: underlineColor,\n      activeUnderlineColor: activeUnderlineColor,\n      textColor: textColor,\n      disabled: disabled,\n      error: error,\n      theme: theme\n    }),\n    inputTextColor = _getFlatInputColors.inputTextColor,\n    activeColor = _getFlatInputColors.activeColor,\n    underlineColorCustom = _getFlatInputColors.underlineColorCustom,\n    placeholderColor = _getFlatInputColors.placeholderColor,\n    errorColor = _getFlatInputColors.errorColor,\n    backgroundColor = _getFlatInputColors.backgroundColor;\n  var containerStyle = {\n    backgroundColor: backgroundColor,\n    borderTopLeftRadius: theme.roundness,\n    borderTopRightRadius: theme.roundness\n  };\n  var labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  var fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n  var labelWidth = parentState.labelLayout.width;\n  var labelHeight = parentState.labelLayout.height;\n  var labelHalfWidth = labelWidth / 2;\n  var labelHalfHeight = labelHeight / 2;\n  var baseLabelTranslateX = (I18nManager.getConstants().isRTL ? 1 : -1) * (labelHalfWidth - labelScale * labelWidth / 2) + (1 - labelScale) * (I18nManager.getConstants().isRTL ? -1 : 1) * paddingLeft;\n  var minInputHeight = dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE : MIN_HEIGHT - LABEL_PADDING_TOP;\n  var inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n  var topPosition = calculateLabelTopPosition(labelHeight, inputHeight, multiline && height ? 0 : !height ? minInputHeight / 2 : 0);\n  if (height && typeof height !== 'number') {\n    console.warn('Currently we support only numbers in height prop');\n  }\n  var paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight: labelHalfHeight,\n    offset: FLAT_INPUT_OFFSET,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition: topPosition,\n    fontSize: fontSize,\n    lineHeight: lineHeight,\n    label: label,\n    scale: fontScale,\n    isAndroid: isAndroid,\n    styles: StyleSheet.flatten(dense ? styles.inputFlatDense : styles.inputFlat)\n  };\n  var pad = calculatePadding(paddingSettings);\n  var paddingFlat = adjustPaddingFlat(_objectSpread(_objectSpread({}, paddingSettings), {}, {\n    pad: pad\n  }));\n  var baseLabelTranslateY = -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n  var placeholderOpacity = hasActiveOutline ? interpolatePlaceholder(parentState.labeled, hasActiveOutline) : parentState.labelLayout.measured ? 1 : 0;\n  var minHeight = height || (dense ? label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT : MIN_HEIGHT);\n  var flatHeight = inputHeight + (!height ? dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP : 0);\n  var iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n  var leftAffixTopPosition = leftLayout.height ? calculateFlatAffixTopPosition(_objectSpread(_objectSpread({\n    height: flatHeight\n  }, paddingFlat), {}, {\n    affixHeight: leftLayout.height\n  })) : null;\n  var rightAffixTopPosition = rightLayout.height ? calculateFlatAffixTopPosition(_objectSpread(_objectSpread({\n    height: flatHeight\n  }, paddingFlat), {}, {\n    affixHeight: rightLayout.height\n  })) : null;\n  var labelProps = {\n    label: label,\n    onLayoutAnimatedText: onLayoutAnimatedText,\n    placeholderOpacity: placeholderOpacity,\n    error: error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY: baseLabelTranslateY,\n    baseLabelTranslateX: baseLabelTranslateX,\n    font: font,\n    fontSize: fontSize,\n    lineHeight: lineHeight,\n    fontWeight: fontWeight,\n    labelScale: labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition: topPosition,\n    paddingOffset: isAndroid ? {\n      paddingLeft: I18nManager.isRTL ? paddingRight : paddingLeft,\n      paddingRight: I18nManager.isRTL ? paddingLeft : paddingRight\n    } : {\n      paddingRight: paddingRight,\n      paddingLeft: paddingLeft\n    },\n    hasActiveOutline: hasActiveOutline,\n    activeColor: activeColor,\n    placeholderColor: placeholderColor,\n    errorColor: errorColor,\n    roundness: roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    testID: testID\n  };\n  var affixTopPosition = (_affixTopPosition = {}, _defineProperty(_affixTopPosition, AdornmentSide.Left, leftAffixTopPosition), _defineProperty(_affixTopPosition, AdornmentSide.Right, rightAffixTopPosition), _affixTopPosition);\n  var onAffixChange = (_onAffixChange = {}, _defineProperty(_onAffixChange, AdornmentSide.Left, onLeftAffixLayoutChange), _defineProperty(_onAffixChange, AdornmentSide.Right, onRightAffixLayoutChange), _onAffixChange);\n  var adornmentProps = {\n    paddingHorizontal: paddingHorizontal,\n    adornmentConfig: adornmentConfig,\n    forceFocus: forceFocus,\n    topPosition: (_topPosition = {}, _defineProperty(_topPosition, AdornmentType.Affix, affixTopPosition), _defineProperty(_topPosition, AdornmentType.Icon, iconTopPosition), _topPosition),\n    onAffixChange: onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = _objectSpread(_objectSpread({}, adornmentProps), {}, {\n      left: left,\n      right: right,\n      textStyle: _objectSpread(_objectSpread({}, font), {}, {\n        fontSize: fontSize,\n        lineHeight: lineHeight,\n        fontWeight: fontWeight\n      }),\n      visible: parentState.labeled\n    });\n  }\n  return React.createElement(View, {\n    style: [containerStyle, viewStyle]\n  }, React.createElement(Underline, {\n    style: underlineStyle,\n    hasActiveOutline: hasActiveOutline,\n    parentState: parentState,\n    underlineColorCustom: underlineColorCustom,\n    error: error,\n    colors: colors,\n    activeColor: activeColor\n  }), React.createElement(View, {\n    style: [styles.labelContainer, {\n      minHeight: minHeight\n    }]\n  }, !isAndroid && multiline && !!label &&\n  React.createElement(View, {\n    testID: \"patch-container\",\n    pointerEvents: \"none\",\n    style: [StyleSheet.absoluteFill, dense ? styles.densePatchContainer : styles.patchContainer, {\n      backgroundColor: viewStyle.backgroundColor || containerStyle.backgroundColor,\n      left: paddingLeft,\n      right: paddingRight\n    }]\n  }), React.createElement(InputLabel, {\n    parentState: parentState,\n    labelProps: labelProps\n  }), render === null || render === void 0 ? void 0 : render(_objectSpread(_objectSpread({\n    testID: testID\n  }, rest), {}, {\n    ref: innerRef,\n    onChangeText: onChangeText,\n    placeholder: label ? parentState.placeholder : rest.placeholder,\n    placeholderTextColor: placeholderTextColor !== null && placeholderTextColor !== void 0 ? placeholderTextColor : placeholderColor,\n    editable: !disabled && editable,\n    selectionColor: typeof selectionColor === 'undefined' ? activeColor : selectionColor,\n    onFocus: onFocus,\n    onBlur: onBlur,\n    underlineColorAndroid: 'transparent',\n    multiline: multiline,\n    style: [styles.input, {\n      paddingLeft: paddingLeft,\n      paddingRight: paddingRight\n    }, !multiline || multiline && height ? {\n      height: flatHeight\n    } : {}, paddingFlat, _objectSpread(_objectSpread({}, font), {}, {\n      fontSize: fontSize,\n      lineHeight: lineHeight,\n      fontWeight: fontWeight,\n      color: inputTextColor,\n      textAlignVertical: multiline ? 'top' : 'center',\n      textAlign: textAlign ? textAlign : I18nManager.getConstants().isRTL ? 'right' : 'left'\n    }), Platform.OS === 'web' && {\n      outline: 'none'\n    }, adornmentStyleAdjustmentForNativeInput]\n  }))), React.createElement(TextInputAdornment, adornmentProps));\n};\nexport default TextInputFlat;\nvar Underline = function Underline(_ref2) {\n  var parentState = _ref2.parentState,\n    error = _ref2.error,\n    colors = _ref2.colors,\n    activeColor = _ref2.activeColor,\n    underlineColorCustom = _ref2.underlineColorCustom,\n    hasActiveOutline = _ref2.hasActiveOutline,\n    style = _ref2.style;\n  var _useInternalTheme = useInternalTheme(),\n    isV3 = _useInternalTheme.isV3;\n  var backgroundColor = parentState.focused ? activeColor : underlineColorCustom;\n  if (error) backgroundColor = colors === null || colors === void 0 ? void 0 : colors.error;\n  var activeScale = isV3 ? 2 : 1;\n  return React.createElement(Animated.View, {\n    testID: \"text-input-underline\",\n    style: [styles.underline, isV3 && styles.md3Underline, {\n      backgroundColor: backgroundColor,\n      transform: [{\n        scaleY: (isV3 ? hasActiveOutline : parentState.focused) ? activeScale : 0.5\n      }]\n    }, style]\n  });\n};\nvar styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n    zIndex: 1\n  },\n  md3Underline: {\n    height: 1\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2\n  }\n});","map":{"version":3,"mappings":"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","names":["React","useInternalTheme","AdornmentSide","AdornmentType","InputMode","TextInputAdornment","getAdornmentConfig","getAdornmentStyleAdjustmentForNativeInput","ADORNMENT_SIZE","LABEL_PADDING_TOP_DENSE","LABEL_WIGGLE_X_OFFSET","MAXIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_FONT_SIZE","MINIMIZED_LABEL_Y_OFFSET","MIN_DENSE_HEIGHT","MIN_DENSE_HEIGHT_WL","adjustPaddingFlat","calculateFlatAffixTopPosition","calculateFlatInputHorizontalPadding","calculateInputHeight","calculateLabelTopPosition","calculatePadding","getConstants","getFlatInputColors","interpolatePlaceholder","InputLabel","TextInputFlat","_ref","disabled","editable","label","error","selectionColor","underlineColor","underlineStyle","activeUnderlineColor","textColor","dense","style","theme","render","props","NativeTextInput","multiline","parentState","innerRef","onFocus","forceFocus","onBlur","onChangeText","onLayoutAnimatedText","onLeftAffixLayoutChange","onRightAffixLayoutChange","left","right","placeholderTextColor","testID","rest","isAndroid","Platform","OS","colors","isV3","roundness","font","fonts","bodyLarge","regular","hasActiveOutline","focused","LABEL_PADDING_TOP","FLAT_INPUT_OFFSET","MIN_HEIGHT","StyleSheet","flatten","fontSizeStyle","fontSize","lineHeight","fontWeight","height","paddingHorizontal","textAlign","viewStyle","isPaddingHorizontalPassed","undefined","adornmentConfig","paddingLeft","paddingRight","leftLayout","rightLayout","rightAffixWidth","width","leftAffixWidth","adornmentStyleAdjustmentForNativeInput","inputOffset","mode","Flat","inputTextColor","activeColor","underlineColorCustom","placeholderColor","errorColor","backgroundColor","containerStyle","borderTopLeftRadius","borderTopRightRadius","labelScale","fontScale","labelWidth","labelLayout","labelHeight","labelHalfWidth","labelHalfHeight","baseLabelTranslateX","I18nManager","isRTL","minInputHeight","inputHeight","topPosition","console","warn","paddingSettings","offset","scale","styles","inputFlatDense","inputFlat","pad","paddingFlat","baseLabelTranslateY","placeholderOpacity","labeled","measured","minHeight","flatHeight","iconTopPosition","leftAffixTopPosition","affixHeight","rightAffixTopPosition","labelProps","placeholderStyle","placeholder","wiggleOffsetX","paddingOffset","maxFontSizeMultiplier","affixTopPosition","Left","Right","onAffixChange","adornmentProps","Affix","Icon","isTextInputFocused","length","textStyle","visible","View","Underline","labelContainer","pointerEvents","absoluteFill","densePatchContainer","patchContainer","ref","underlineColorAndroid","input","color","textAlignVertical","outline","_ref2","activeScale","Animated","underline","md3Underline","transform","scaleY","create","position","bottom","zIndex","paddingTop","paddingBottom","flexGrow","margin"],"sources":["TextInputFlat.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n  Animated,\n  I18nManager,\n  Platform,\n  StyleProp,\n  StyleSheet,\n  TextInput as NativeTextInput,\n  TextStyle,\n  View,\n  ViewStyle,\n} from 'react-native';\n\nimport { useInternalTheme } from '../../core/theming';\nimport { AdornmentSide, AdornmentType, InputMode } from './Adornment/enums';\nimport TextInputAdornment, {\n  TextInputAdornmentProps,\n} from './Adornment/TextInputAdornment';\nimport {\n  getAdornmentConfig,\n  getAdornmentStyleAdjustmentForNativeInput,\n} from './Adornment/TextInputAdornment';\nimport {\n  ADORNMENT_SIZE,\n  LABEL_PADDING_TOP_DENSE,\n  LABEL_WIGGLE_X_OFFSET,\n  MAXIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_FONT_SIZE,\n  MINIMIZED_LABEL_Y_OFFSET,\n  MIN_DENSE_HEIGHT,\n  MIN_DENSE_HEIGHT_WL,\n} from './constants';\nimport {\n  adjustPaddingFlat,\n  calculateFlatAffixTopPosition,\n  calculateFlatInputHorizontalPadding,\n  calculateInputHeight,\n  calculateLabelTopPosition,\n  calculatePadding,\n  getConstants,\n  getFlatInputColors,\n  interpolatePlaceholder,\n  Padding,\n} from './helpers';\nimport InputLabel from './Label/InputLabel';\nimport type { ChildTextInputProps, RenderProps } from './types';\n\nconst TextInputFlat = ({\n  disabled = false,\n  editable = true,\n  label,\n  error = false,\n  selectionColor,\n  underlineColor,\n  underlineStyle,\n  activeUnderlineColor,\n  textColor,\n  dense,\n  style,\n  theme,\n  render = (props: RenderProps) => <NativeTextInput {...props} />,\n  multiline = false,\n  parentState,\n  innerRef,\n  onFocus,\n  forceFocus,\n  onBlur,\n  onChangeText,\n  onLayoutAnimatedText,\n  onLeftAffixLayoutChange,\n  onRightAffixLayoutChange,\n  left,\n  right,\n  placeholderTextColor,\n  testID = 'text-input-flat',\n  ...rest\n}: ChildTextInputProps) => {\n  const isAndroid = Platform.OS === 'android';\n  const { colors, isV3, roundness } = theme;\n  const font = isV3 ? theme.fonts.bodyLarge : theme.fonts.regular;\n  const hasActiveOutline = parentState.focused || error;\n\n  const { LABEL_PADDING_TOP, FLAT_INPUT_OFFSET, MIN_HEIGHT } =\n    getConstants(isV3);\n\n  const {\n    fontSize: fontSizeStyle,\n    lineHeight,\n    fontWeight,\n    height,\n    paddingHorizontal,\n    textAlign,\n    ...viewStyle\n  } = (StyleSheet.flatten(style) || {}) as TextStyle;\n  const fontSize = fontSizeStyle || MAXIMIZED_LABEL_FONT_SIZE;\n\n  const isPaddingHorizontalPassed =\n    paddingHorizontal !== undefined && typeof paddingHorizontal === 'number';\n\n  const adornmentConfig = getAdornmentConfig({\n    left,\n    right,\n  });\n\n  let { paddingLeft, paddingRight } = calculateFlatInputHorizontalPadding({\n    adornmentConfig,\n    isV3,\n  });\n\n  if (isPaddingHorizontalPassed) {\n    paddingLeft = paddingHorizontal as number;\n    paddingRight = paddingHorizontal as number;\n  }\n\n  const { leftLayout, rightLayout } = parentState;\n\n  const rightAffixWidth = right\n    ? rightLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const leftAffixWidth = left\n    ? leftLayout.width || ADORNMENT_SIZE\n    : ADORNMENT_SIZE;\n\n  const adornmentStyleAdjustmentForNativeInput =\n    getAdornmentStyleAdjustmentForNativeInput({\n      adornmentConfig,\n      rightAffixWidth,\n      leftAffixWidth,\n      paddingHorizontal,\n      inputOffset: FLAT_INPUT_OFFSET,\n      mode: InputMode.Flat,\n      isV3,\n    });\n\n  const {\n    inputTextColor,\n    activeColor,\n    underlineColorCustom,\n    placeholderColor,\n    errorColor,\n    backgroundColor,\n  } = getFlatInputColors({\n    underlineColor,\n    activeUnderlineColor,\n    textColor,\n    disabled,\n    error,\n    theme,\n  });\n\n  const containerStyle = {\n    backgroundColor,\n    borderTopLeftRadius: theme.roundness,\n    borderTopRightRadius: theme.roundness,\n  };\n\n  const labelScale = MINIMIZED_LABEL_FONT_SIZE / fontSize;\n  const fontScale = MAXIMIZED_LABEL_FONT_SIZE / fontSize;\n\n  const labelWidth = parentState.labelLayout.width;\n  const labelHeight = parentState.labelLayout.height;\n  const labelHalfWidth = labelWidth / 2;\n  const labelHalfHeight = labelHeight / 2;\n\n  const baseLabelTranslateX =\n    (I18nManager.getConstants().isRTL ? 1 : -1) *\n      (labelHalfWidth - (labelScale * labelWidth) / 2) +\n    (1 - labelScale) *\n      (I18nManager.getConstants().isRTL ? -1 : 1) *\n      paddingLeft;\n\n  const minInputHeight = dense\n    ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) - LABEL_PADDING_TOP_DENSE\n    : MIN_HEIGHT - LABEL_PADDING_TOP;\n\n  const inputHeight = calculateInputHeight(labelHeight, height, minInputHeight);\n\n  const topPosition = calculateLabelTopPosition(\n    labelHeight,\n    inputHeight,\n    multiline && height ? 0 : !height ? minInputHeight / 2 : 0\n  );\n\n  if (height && typeof height !== 'number') {\n    // eslint-disable-next-line\n    console.warn('Currently we support only numbers in height prop');\n  }\n\n  const paddingSettings = {\n    height: height ? +height : null,\n    labelHalfHeight,\n    offset: FLAT_INPUT_OFFSET,\n    multiline: multiline ? multiline : null,\n    dense: dense ? dense : null,\n    topPosition,\n    fontSize,\n    lineHeight,\n    label,\n    scale: fontScale,\n    isAndroid,\n    styles: StyleSheet.flatten(\n      dense ? styles.inputFlatDense : styles.inputFlat\n    ) as Padding,\n  };\n\n  const pad = calculatePadding(paddingSettings);\n\n  const paddingFlat = adjustPaddingFlat({\n    ...paddingSettings,\n    pad,\n  });\n\n  const baseLabelTranslateY =\n    -labelHalfHeight - (topPosition + MINIMIZED_LABEL_Y_OFFSET);\n\n  const placeholderOpacity = hasActiveOutline\n    ? interpolatePlaceholder(parentState.labeled, hasActiveOutline)\n    : parentState.labelLayout.measured\n    ? 1\n    : 0;\n\n  const minHeight =\n    height ||\n    (dense ? (label ? MIN_DENSE_HEIGHT_WL : MIN_DENSE_HEIGHT) : MIN_HEIGHT);\n\n  const flatHeight =\n    inputHeight +\n    (!height ? (dense ? LABEL_PADDING_TOP_DENSE : LABEL_PADDING_TOP) : 0);\n\n  const iconTopPosition = (flatHeight - ADORNMENT_SIZE) / 2;\n\n  const leftAffixTopPosition = leftLayout.height\n    ? calculateFlatAffixTopPosition({\n        height: flatHeight,\n        ...paddingFlat,\n        affixHeight: leftLayout.height,\n      })\n    : null;\n\n  const rightAffixTopPosition = rightLayout.height\n    ? calculateFlatAffixTopPosition({\n        height: flatHeight,\n        ...paddingFlat,\n        affixHeight: rightLayout.height,\n      })\n    : null;\n\n  const labelProps = {\n    label,\n    onLayoutAnimatedText,\n    placeholderOpacity,\n    error,\n    placeholderStyle: styles.placeholder,\n    baseLabelTranslateY,\n    baseLabelTranslateX,\n    font,\n    fontSize,\n    lineHeight,\n    fontWeight,\n    labelScale,\n    wiggleOffsetX: LABEL_WIGGLE_X_OFFSET,\n    topPosition,\n    paddingOffset: isAndroid\n      ? {\n          paddingLeft: I18nManager.isRTL ? paddingRight : paddingLeft,\n          paddingRight: I18nManager.isRTL ? paddingLeft : paddingRight,\n        }\n      : { paddingRight, paddingLeft },\n    hasActiveOutline,\n    activeColor,\n    placeholderColor,\n    errorColor,\n    roundness,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n    testID,\n  };\n  const affixTopPosition = {\n    [AdornmentSide.Left]: leftAffixTopPosition,\n    [AdornmentSide.Right]: rightAffixTopPosition,\n  };\n  const onAffixChange = {\n    [AdornmentSide.Left]: onLeftAffixLayoutChange,\n    [AdornmentSide.Right]: onRightAffixLayoutChange,\n  };\n\n  let adornmentProps: TextInputAdornmentProps = {\n    paddingHorizontal,\n    adornmentConfig,\n    forceFocus,\n    topPosition: {\n      [AdornmentType.Affix]: affixTopPosition,\n      [AdornmentType.Icon]: iconTopPosition,\n    },\n    onAffixChange,\n    isTextInputFocused: parentState.focused,\n    maxFontSizeMultiplier: rest.maxFontSizeMultiplier,\n  };\n  if (adornmentConfig.length) {\n    adornmentProps = {\n      ...adornmentProps,\n      left,\n      right,\n      textStyle: { ...font, fontSize, lineHeight, fontWeight },\n      visible: parentState.labeled,\n    };\n  }\n\n  return (\n    <View style={[containerStyle, viewStyle]}>\n      <Underline\n        style={underlineStyle}\n        hasActiveOutline={hasActiveOutline}\n        parentState={parentState}\n        underlineColorCustom={underlineColorCustom}\n        error={error}\n        colors={colors}\n        activeColor={activeColor}\n      />\n      <View\n        style={[\n          styles.labelContainer,\n          {\n            minHeight,\n          },\n        ]}\n      >\n        {!isAndroid && multiline && !!label && (\n          // Workaround for: https://github.com/callstack/react-native-paper/issues/2799\n          // Patch for a multiline TextInput with fixed height, which allow to avoid covering input label with its value.\n          <View\n            testID=\"patch-container\"\n            pointerEvents=\"none\"\n            style={[\n              StyleSheet.absoluteFill,\n              dense ? styles.densePatchContainer : styles.patchContainer,\n              {\n                backgroundColor:\n                  viewStyle.backgroundColor || containerStyle.backgroundColor,\n                left: paddingLeft,\n                right: paddingRight,\n              },\n            ]}\n          />\n        )}\n        <InputLabel parentState={parentState} labelProps={labelProps} />\n        {render?.({\n          testID,\n          ...rest,\n          ref: innerRef,\n          onChangeText,\n          placeholder: label ? parentState.placeholder : rest.placeholder,\n          placeholderTextColor: placeholderTextColor ?? placeholderColor,\n          editable: !disabled && editable,\n          selectionColor:\n            typeof selectionColor === 'undefined'\n              ? activeColor\n              : selectionColor,\n          onFocus,\n          onBlur,\n          underlineColorAndroid: 'transparent',\n          multiline,\n          style: [\n            styles.input,\n            { paddingLeft, paddingRight },\n            !multiline || (multiline && height) ? { height: flatHeight } : {},\n            paddingFlat,\n            {\n              ...font,\n              fontSize,\n              lineHeight,\n              fontWeight,\n              color: inputTextColor,\n              textAlignVertical: multiline ? 'top' : 'center',\n              textAlign: textAlign\n                ? textAlign\n                : I18nManager.getConstants().isRTL\n                ? 'right'\n                : 'left',\n            },\n            Platform.OS === 'web' && { outline: 'none' },\n            adornmentStyleAdjustmentForNativeInput,\n          ],\n        })}\n      </View>\n      <TextInputAdornment {...adornmentProps} />\n    </View>\n  );\n};\n\nexport default TextInputFlat;\n\ntype UnderlineProps = {\n  parentState: {\n    focused: boolean;\n  };\n  error?: boolean;\n  colors?: {\n    error?: string;\n  };\n  activeColor: string;\n  underlineColorCustom?: string;\n  hasActiveOutline?: boolean;\n  style?: StyleProp<ViewStyle>;\n};\n\nconst Underline = ({\n  parentState,\n  error,\n  colors,\n  activeColor,\n  underlineColorCustom,\n  hasActiveOutline,\n  style,\n}: UnderlineProps) => {\n  const { isV3 } = useInternalTheme();\n\n  let backgroundColor = parentState.focused\n    ? activeColor\n    : underlineColorCustom;\n\n  if (error) backgroundColor = colors?.error;\n\n  const activeScale = isV3 ? 2 : 1;\n\n  return (\n    <Animated.View\n      testID=\"text-input-underline\"\n      style={[\n        styles.underline,\n        isV3 && styles.md3Underline,\n        {\n          backgroundColor,\n          // Underlines is thinner when input is not focused\n          transform: [\n            {\n              scaleY: (isV3 ? hasActiveOutline : parentState.focused)\n                ? activeScale\n                : 0.5,\n            },\n          ],\n        },\n        style,\n      ]}\n    />\n  );\n};\n\nconst styles = StyleSheet.create({\n  placeholder: {\n    position: 'absolute',\n    left: 0,\n  },\n  underline: {\n    position: 'absolute',\n    left: 0,\n    right: 0,\n    bottom: 0,\n    height: 2,\n    zIndex: 1,\n  },\n  md3Underline: {\n    height: 1,\n  },\n  labelContainer: {\n    paddingTop: 0,\n    paddingBottom: 0,\n  },\n  input: {\n    flexGrow: 1,\n    margin: 0,\n  },\n  inputFlat: {\n    paddingTop: 24,\n    paddingBottom: 4,\n  },\n  inputFlatDense: {\n    paddingTop: 22,\n    paddingBottom: 2,\n  },\n  patchContainer: {\n    height: 24,\n    zIndex: 2,\n  },\n  densePatchContainer: {\n    height: 22,\n    zIndex: 2,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}