{"ast":null,"code":"\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function ctor() {\n    this.constructor = child;\n  }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message = message;\n  this.expected = expected;\n  this.found = found;\n  this.location = location;\n  this.name = \"SyntaxError\";\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\npeg$subclass(peg$SyntaxError, Error);\npeg$SyntaxError.buildMessage = function (expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n    literal: function literal(expectation) {\n      return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n    },\n    \"class\": function _class(expectation) {\n      var escapedParts = \"\",\n        i;\n      for (i = 0; i < expectation.parts.length; i++) {\n        escapedParts += expectation.parts[i] instanceof Array ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1]) : classEscape(expectation.parts[i]);\n      }\n      return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n    },\n    any: function any(expectation) {\n      return \"any character\";\n    },\n    end: function end(expectation) {\n      return \"end of input\";\n    },\n    other: function other(expectation) {\n      return expectation.description;\n    }\n  };\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n  function literalEscape(s) {\n    return s.replace(/\\\\/g, '\\\\\\\\').replace(/\"/g, '\\\\\"').replace(/\\0/g, '\\\\0').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x0F]/g, function (ch) {\n      return '\\\\x0' + hex(ch);\n    }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n      return '\\\\x' + hex(ch);\n    });\n  }\n  function classEscape(s) {\n    return s.replace(/\\\\/g, '\\\\\\\\').replace(/\\]/g, '\\\\]').replace(/\\^/g, '\\\\^').replace(/-/g, '\\\\-').replace(/\\0/g, '\\\\0').replace(/\\t/g, '\\\\t').replace(/\\n/g, '\\\\n').replace(/\\r/g, '\\\\r').replace(/[\\x00-\\x0F]/g, function (ch) {\n      return '\\\\x0' + hex(ch);\n    }).replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function (ch) {\n      return '\\\\x' + hex(ch);\n    });\n  }\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n      i,\n      j;\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n    descriptions.sort();\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n      default:\n        return descriptions.slice(0, -1).join(\", \") + \", or \" + descriptions[descriptions.length - 1];\n    }\n  }\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n  var peg$FAILED = {},\n    peg$startRuleFunctions = {\n      transformList: peg$parsetransformList\n    },\n    peg$startRuleFunction = peg$parsetransformList,\n    peg$c0 = function peg$c0(ts) {\n      return ts;\n    },\n    peg$c1 = function peg$c1(t, ts) {\n      return multiply_matrices(t, ts);\n    },\n    peg$c2 = \"matrix\",\n    peg$c3 = peg$literalExpectation(\"matrix\", false),\n    peg$c4 = \"(\",\n    peg$c5 = peg$literalExpectation(\"(\", false),\n    peg$c6 = \")\",\n    peg$c7 = peg$literalExpectation(\")\", false),\n    peg$c8 = function peg$c8(a, b, c, d, e, f) {\n      return [a, c, e, b, d, f];\n    },\n    peg$c9 = \"translate\",\n    peg$c10 = peg$literalExpectation(\"translate\", false),\n    peg$c11 = function peg$c11(tx, ty) {\n      return [1, 0, tx, 0, 1, ty || 0];\n    },\n    peg$c12 = \"scale\",\n    peg$c13 = peg$literalExpectation(\"scale\", false),\n    peg$c14 = function peg$c14(sx, sy) {\n      return [sx, 0, 0, 0, sy === null ? sx : sy, 0];\n    },\n    peg$c15 = \"rotate\",\n    peg$c16 = peg$literalExpectation(\"rotate\", false),\n    peg$c17 = function peg$c17(angle, c) {\n      var cos = Math.cos(deg2rad * angle);\n      var sin = Math.sin(deg2rad * angle);\n      if (c !== null) {\n        var x = c[0];\n        var y = c[1];\n        return [cos, -sin, cos * -x + -sin * -y + x, sin, cos, sin * -x + cos * -y + y];\n      }\n      return [cos, -sin, 0, sin, cos, 0];\n    },\n    peg$c18 = \"skewX\",\n    peg$c19 = peg$literalExpectation(\"skewX\", false),\n    peg$c20 = function peg$c20(angle) {\n      return [1, Math.tan(deg2rad * angle), 0, 0, 1, 0];\n    },\n    peg$c21 = \"skewY\",\n    peg$c22 = peg$literalExpectation(\"skewY\", false),\n    peg$c23 = function peg$c23(angle) {\n      return [1, 0, 0, Math.tan(deg2rad * angle), 1, 0];\n    },\n    peg$c24 = function peg$c24(f) {\n      return parseFloat(f.join(\"\"));\n    },\n    peg$c25 = function peg$c25(i) {\n      return parseInt(i.join(\"\"));\n    },\n    peg$c26 = function peg$c26(n) {\n      return n;\n    },\n    peg$c27 = function peg$c27(n1, n2) {\n      return [n1, n2];\n    },\n    peg$c28 = \",\",\n    peg$c29 = peg$literalExpectation(\",\", false),\n    peg$c30 = function peg$c30(ds) {\n      return ds.join(\"\");\n    },\n    peg$c31 = function peg$c31(f) {\n      return f.join(\"\");\n    },\n    peg$c32 = function peg$c32(d) {\n      return d.join(\"\");\n    },\n    peg$c33 = peg$otherExpectation(\"fractionalConstant\"),\n    peg$c34 = \".\",\n    peg$c35 = peg$literalExpectation(\".\", false),\n    peg$c36 = function peg$c36(d1, d2) {\n      return [d1 ? d1.join(\"\") : null, \".\", d2.join(\"\")].join(\"\");\n    },\n    peg$c37 = /^[eE]/,\n    peg$c38 = peg$classExpectation([\"e\", \"E\"], false, false),\n    peg$c39 = function peg$c39(e) {\n      return [e[0], e[1], e[2].join(\"\")].join(\"\");\n    },\n    peg$c40 = /^[+\\-]/,\n    peg$c41 = peg$classExpectation([\"+\", \"-\"], false, false),\n    peg$c42 = /^[0-9]/,\n    peg$c43 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n    peg$c44 = /^[ \\t\\r\\n]/,\n    peg$c45 = peg$classExpectation([\" \", \"\\t\", \"\\r\", \"\\n\"], false, false),\n    peg$currPos = 0,\n    peg$savedPos = 0,\n    peg$posDetailsCache = [{\n      line: 1,\n      column: 1\n    }],\n    peg$maxFailPos = 0,\n    peg$maxFailExpected = [],\n    peg$silentFails = 0,\n    peg$result;\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildStructuredError([peg$otherExpectation(description)], input.substring(peg$savedPos, peg$currPos), location);\n  }\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos);\n    throw peg$buildSimpleError(message, location);\n  }\n  function peg$literalExpectation(text, ignoreCase) {\n    return {\n      type: \"literal\",\n      text: text,\n      ignoreCase: ignoreCase\n    };\n  }\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return {\n      type: \"class\",\n      parts: parts,\n      inverted: inverted,\n      ignoreCase: ignoreCase\n    };\n  }\n  function peg$anyExpectation() {\n    return {\n      type: \"any\"\n    };\n  }\n  function peg$endExpectation() {\n    return {\n      type: \"end\"\n    };\n  }\n  function peg$otherExpectation(description) {\n    return {\n      type: \"other\",\n      description: description\n    };\n  }\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos],\n      p;\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n      details = peg$posDetailsCache[p];\n      details = {\n        line: details.line,\n        column: details.column\n      };\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n        p++;\n      }\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n      endPosDetails = peg$computePosDetails(endPos);\n    return {\n      start: {\n        offset: startPos,\n        line: startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line: endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) {\n      return;\n    }\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n    peg$maxFailExpected.push(expected);\n  }\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(peg$SyntaxError.buildMessage(expected, found), expected, found, location);\n  }\n  function peg$parsetransformList() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsewsp();\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$parsewsp();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsetransforms();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsewsp();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsewsp();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c0(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    return s0;\n  }\n  function peg$parsetransforms() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$parsetransform();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecommaWsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecommaWsp();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetransforms();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsetransform();\n    }\n    return s0;\n  }\n  function peg$parsetransform() {\n    var s0;\n    s0 = peg$parsematrix();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsetranslate();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsescale();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parserotate();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseskewX();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseskewY();\n            }\n          }\n        }\n      }\n    }\n    return s0;\n  }\n  function peg$parsematrix() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6) === peg$c2) {\n      s1 = peg$c2;\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c3);\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c5);\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecommaWsp();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsenumber();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsecommaWsp();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsenumber();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsecommaWsp();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsenumber();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsecommaWsp();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsenumber();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parsecommaWsp();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsenumber();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = [];\n                                  s17 = peg$parsewsp();\n                                  while (s17 !== peg$FAILED) {\n                                    s16.push(s17);\n                                    s17 = peg$parsewsp();\n                                  }\n                                  if (s16 !== peg$FAILED) {\n                                    if (input.charCodeAt(peg$currPos) === 41) {\n                                      s17 = peg$c6;\n                                      peg$currPos++;\n                                    } else {\n                                      s17 = peg$FAILED;\n                                      if (peg$silentFails === 0) {\n                                        peg$fail(peg$c7);\n                                      }\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      peg$savedPos = s0;\n                                      s1 = peg$c8(s5, s7, s9, s11, s13, s15);\n                                      s0 = s1;\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    return s0;\n  }\n  function peg$parsetranslate() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c9) {\n      s1 = peg$c9;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c10);\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c5);\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecommaWspNumber();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$parsewsp();\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parsewsp();\n                }\n                if (s7 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s8 = peg$c6;\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c7);\n                    }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c11(s5, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    return s0;\n  }\n  function peg$parsescale() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5) === peg$c12) {\n      s1 = peg$c12;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c13);\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c5);\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecommaWspNumber();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$parsewsp();\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parsewsp();\n                }\n                if (s7 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s8 = peg$c6;\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c7);\n                    }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c14(s5, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    return s0;\n  }\n  function peg$parserotate() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6) === peg$c15) {\n      s1 = peg$c15;\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c16);\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c5);\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecommaWspTwoNumbers();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$parsewsp();\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parsewsp();\n                }\n                if (s7 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s8 = peg$c6;\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) {\n                      peg$fail(peg$c7);\n                    }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c17(s5, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    return s0;\n  }\n  function peg$parseskewX() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5) === peg$c18) {\n      s1 = peg$c18;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c19);\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c5);\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$parsewsp();\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parsewsp();\n              }\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 41) {\n                  s7 = peg$c6;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c7);\n                  }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c20(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    return s0;\n  }\n  function peg$parseskewY() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5) === peg$c21) {\n      s1 = peg$c21;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c22);\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c5);\n          }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$parsewsp();\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parsewsp();\n              }\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 41) {\n                  s7 = peg$c6;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) {\n                    peg$fail(peg$c7);\n                  }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c23(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    return s0;\n  }\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsesign();\n    if (s2 === peg$FAILED) {\n      s2 = null;\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsefloatingPointConstant();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c24(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parsesign();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseintegerConstant();\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c25(s1);\n      }\n      s0 = s1;\n    }\n    return s0;\n  }\n  function peg$parsecommaWspNumber() {\n    var s0, s1, s2;\n    s0 = peg$currPos;\n    s1 = peg$parsecommaWsp();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumber();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c26(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    return s0;\n  }\n  function peg$parsecommaWspTwoNumbers() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n    s1 = peg$parsecommaWsp();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumber();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecommaWsp();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsenumber();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c27(s2, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    return s0;\n  }\n  function peg$parsecommaWsp() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsewsp();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsewsp();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsecomma();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsewsp();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsewsp();\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecomma();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parsewsp();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsewsp();\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n    return s0;\n  }\n  function peg$parsecomma() {\n    var s0;\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c28;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c29);\n      }\n    }\n    return s0;\n  }\n  function peg$parseintegerConstant() {\n    var s0, s1;\n    s0 = peg$currPos;\n    s1 = peg$parsedigitSequence();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c30(s1);\n    }\n    s0 = s1;\n    return s0;\n  }\n  function peg$parsefloatingPointConstant() {\n    var s0, s1, s2, s3;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsefractionalConstant();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseexponent();\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c31(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parsedigitSequence();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexponent();\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c32(s1);\n      }\n      s0 = s1;\n    }\n    return s0;\n  }\n  function peg$parsefractionalConstant() {\n    var s0, s1, s2, s3;\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsedigitSequence();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s2 = peg$c34;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) {\n          peg$fail(peg$c35);\n        }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedigitSequence();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c36(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsedigitSequence();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 46) {\n          s2 = peg$c34;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) {\n            peg$fail(peg$c35);\n          }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c32(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c33);\n      }\n    }\n    return s0;\n  }\n  function peg$parseexponent() {\n    var s0, s1, s2, s3, s4;\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (peg$c37.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c38);\n      }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsesign();\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parsedigitSequence();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c39(s1);\n    }\n    s0 = s1;\n    return s0;\n  }\n  function peg$parsesign() {\n    var s0;\n    if (peg$c40.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c41);\n      }\n    }\n    return s0;\n  }\n  function peg$parsedigitSequence() {\n    var s0, s1;\n    s0 = [];\n    s1 = peg$parsedigit();\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsedigit();\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n    return s0;\n  }\n  function peg$parsedigit() {\n    var s0;\n    if (peg$c42.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c43);\n      }\n    }\n    return s0;\n  }\n  function peg$parsewsp() {\n    var s0;\n    if (peg$c44.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) {\n        peg$fail(peg$c45);\n      }\n    }\n    return s0;\n  }\n  var deg2rad = Math.PI / 180;\n  function multiply_matrices(l, r) {\n    var al = l[0];\n    var cl = l[1];\n    var el = l[2];\n    var bl = l[3];\n    var dl = l[4];\n    var fl = l[5];\n    var ar = r[0];\n    var cr = r[1];\n    var er = r[2];\n    var br = r[3];\n    var dr = r[4];\n    var fr = r[5];\n    var a = al * ar + cl * br;\n    var c = al * cr + cl * dr;\n    var e = al * er + cl * fr + el;\n    var b = bl * ar + dl * br;\n    var d = bl * cr + dl * dr;\n    var f = bl * er + dl * fr + fl;\n    return [a, c, e, b, d, f];\n  }\n  peg$result = peg$startRuleFunction();\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n    throw peg$buildStructuredError(peg$maxFailExpected, peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null, peg$maxFailPos < input.length ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1) : peg$computeLocation(peg$maxFailPos, peg$maxFailPos));\n  }\n}\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse: peg$parse\n};","map":{"version":3,"mappings":"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","names":["peg$subclass","child","parent","ctor","constructor","prototype","peg$SyntaxError","message","expected","found","location","name","Error","captureStackTrace","buildMessage","DESCRIBE_EXPECTATION_FNS","literal","expectation","literalEscape","text","escapedParts","i","parts","length","Array","classEscape","inverted","any","end","other","description","hex","ch","charCodeAt","toString","toUpperCase","s","replace","describeExpectation","type","describeExpected","descriptions","j","sort","slice","join","describeFound","peg$parse","input","options","peg$FAILED","peg$startRuleFunctions","transformList","peg$parsetransformList","peg$startRuleFunction","peg$c0","ts","peg$c1","t","multiply_matrices","peg$c2","peg$c3","peg$literalExpectation","peg$c4","peg$c5","peg$c6","peg$c7","peg$c8","a","b","c","d","e","f","peg$c9","peg$c10","peg$c11","tx","ty","peg$c12","peg$c13","peg$c14","sx","sy","peg$c15","peg$c16","peg$c17","angle","cos","Math","deg2rad","sin","x","y","peg$c18","peg$c19","peg$c20","tan","peg$c21","peg$c22","peg$c23","peg$c24","parseFloat","peg$c25","parseInt","peg$c26","n","peg$c27","n1","n2","peg$c28","peg$c29","peg$c30","ds","peg$c31","peg$c32","peg$c33","peg$otherExpectation","peg$c34","peg$c35","peg$c36","d1","d2","peg$c37","peg$c38","peg$classExpectation","peg$c39","peg$c40","peg$c41","peg$c42","peg$c43","peg$c44","peg$c45","peg$currPos","peg$savedPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","peg$result","startRule","substring","peg$computeLocation","peg$buildStructuredError","error","peg$buildSimpleError","ignoreCase","peg$anyExpectation","peg$endExpectation","peg$computePosDetails","pos","details","p","startPos","endPos","startPosDetails","endPosDetails","start","offset","peg$fail","push","s0","s1","s2","s3","s4","peg$parsewsp","peg$parsetransforms","peg$parsetransform","peg$parsecommaWsp","peg$parsematrix","peg$parsetranslate","peg$parsescale","peg$parserotate","peg$parseskewX","peg$parseskewY","s5","s6","s7","s8","s9","s10","s11","s12","s13","s14","s15","s16","s17","substr","peg$parsenumber","peg$parsecommaWspNumber","peg$parsecommaWspTwoNumbers","peg$parsesign","peg$parsefloatingPointConstant","peg$parseintegerConstant","peg$parsecomma","peg$parsedigitSequence","peg$parsefractionalConstant","peg$parseexponent","test","charAt","peg$parsedigit","PI","l","r","al","cl","el","bl","dl","fl","ar","cr","er","br","dr","fr","module","exports","SyntaxError","parse"],"sources":["transform.js"],"sourcesContent":["/*\n * Generated by PEG.js 0.10.0.\n *\n * http://pegjs.org/\n */\n\n\"use strict\";\n\nfunction peg$subclass(child, parent) {\n  function ctor() { this.constructor = child; }\n  ctor.prototype = parent.prototype;\n  child.prototype = new ctor();\n}\n\nfunction peg$SyntaxError(message, expected, found, location) {\n  this.message  = message;\n  this.expected = expected;\n  this.found    = found;\n  this.location = location;\n  this.name     = \"SyntaxError\";\n\n  if (typeof Error.captureStackTrace === \"function\") {\n    Error.captureStackTrace(this, peg$SyntaxError);\n  }\n}\n\npeg$subclass(peg$SyntaxError, Error);\n\npeg$SyntaxError.buildMessage = function(expected, found) {\n  var DESCRIBE_EXPECTATION_FNS = {\n        literal: function(expectation) {\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        },\n\n        \"class\": function(expectation) {\n          var escapedParts = \"\",\n              i;\n\n          for (i = 0; i < expectation.parts.length; i++) {\n            escapedParts += expectation.parts[i] instanceof Array\n              ? classEscape(expectation.parts[i][0]) + \"-\" + classEscape(expectation.parts[i][1])\n              : classEscape(expectation.parts[i]);\n          }\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        },\n\n        any: function(expectation) {\n          return \"any character\";\n        },\n\n        end: function(expectation) {\n          return \"end of input\";\n        },\n\n        other: function(expectation) {\n          return expectation.description;\n        }\n      };\n\n  function hex(ch) {\n    return ch.charCodeAt(0).toString(16).toUpperCase();\n  }\n\n  function literalEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\"/g,  '\\\\\"')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function classEscape(s) {\n    return s\n      .replace(/\\\\/g, '\\\\\\\\')\n      .replace(/\\]/g, '\\\\]')\n      .replace(/\\^/g, '\\\\^')\n      .replace(/-/g,  '\\\\-')\n      .replace(/\\0/g, '\\\\0')\n      .replace(/\\t/g, '\\\\t')\n      .replace(/\\n/g, '\\\\n')\n      .replace(/\\r/g, '\\\\r')\n      .replace(/[\\x00-\\x0F]/g,          function(ch) { return '\\\\x0' + hex(ch); })\n      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return '\\\\x'  + hex(ch); });\n  }\n\n  function describeExpectation(expectation) {\n    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);\n  }\n\n  function describeExpected(expected) {\n    var descriptions = new Array(expected.length),\n        i, j;\n\n    for (i = 0; i < expected.length; i++) {\n      descriptions[i] = describeExpectation(expected[i]);\n    }\n\n    descriptions.sort();\n\n    if (descriptions.length > 0) {\n      for (i = 1, j = 1; i < descriptions.length; i++) {\n        if (descriptions[i - 1] !== descriptions[i]) {\n          descriptions[j] = descriptions[i];\n          j++;\n        }\n      }\n      descriptions.length = j;\n    }\n\n    switch (descriptions.length) {\n      case 1:\n        return descriptions[0];\n\n      case 2:\n        return descriptions[0] + \" or \" + descriptions[1];\n\n      default:\n        return descriptions.slice(0, -1).join(\", \")\n          + \", or \"\n          + descriptions[descriptions.length - 1];\n    }\n  }\n\n  function describeFound(found) {\n    return found ? \"\\\"\" + literalEscape(found) + \"\\\"\" : \"end of input\";\n  }\n\n  return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n};\n\nfunction peg$parse(input, options) {\n  options = options !== void 0 ? options : {};\n\n  var peg$FAILED = {},\n\n      peg$startRuleFunctions = { transformList: peg$parsetransformList },\n      peg$startRuleFunction  = peg$parsetransformList,\n\n      peg$c0 = function(ts) { return ts; },\n      peg$c1 = function(t, ts) {\n              return multiply_matrices(t, ts);\n          },\n      peg$c2 = \"matrix\",\n      peg$c3 = peg$literalExpectation(\"matrix\", false),\n      peg$c4 = \"(\",\n      peg$c5 = peg$literalExpectation(\"(\", false),\n      peg$c6 = \")\",\n      peg$c7 = peg$literalExpectation(\")\", false),\n      peg$c8 = function(a, b, c, d, e, f) {\n              return [\n                  a, c, e,\n                  b, d, f\n              ];\n          },\n      peg$c9 = \"translate\",\n      peg$c10 = peg$literalExpectation(\"translate\", false),\n      peg$c11 = function(tx, ty) {\n              return [\n                  1, 0, tx,\n                  0, 1, ty || 0\n              ];\n          },\n      peg$c12 = \"scale\",\n      peg$c13 = peg$literalExpectation(\"scale\", false),\n      peg$c14 = function(sx, sy) {\n              return [\n                  sx, 0,                     0,\n                  0,  sy === null ? sx : sy, 0\n              ];\n          },\n      peg$c15 = \"rotate\",\n      peg$c16 = peg$literalExpectation(\"rotate\", false),\n      peg$c17 = function(angle, c) {\n              var cos = Math.cos(deg2rad * angle);\n              var sin = Math.sin(deg2rad * angle);\n              if (c !== null) {\n                  var x = c[0];\n                  var y = c[1];\n                  return [\n                      cos, -sin, cos * -x + -sin * -y + x,\n                      sin,  cos, sin * -x +  cos * -y + y\n                  ];\n              }\n              return [\n                  cos, -sin, 0,\n                  sin,  cos, 0\n              ];\n          },\n      peg$c18 = \"skewX\",\n      peg$c19 = peg$literalExpectation(\"skewX\", false),\n      peg$c20 = function(angle) {\n              return [\n                  1, Math.tan(deg2rad * angle), 0,\n                  0, 1,                         0\n              ];\n          },\n      peg$c21 = \"skewY\",\n      peg$c22 = peg$literalExpectation(\"skewY\", false),\n      peg$c23 = function(angle) {\n              return [\n                  1,                         0, 0,\n                  Math.tan(deg2rad * angle), 1, 0\n              ];\n          },\n      peg$c24 = function(f) { return parseFloat(f.join(\"\")); },\n      peg$c25 = function(i) { return parseInt(i.join(\"\")); },\n      peg$c26 = function(n) { return n; },\n      peg$c27 = function(n1, n2) { return [n1, n2]; },\n      peg$c28 = \",\",\n      peg$c29 = peg$literalExpectation(\",\", false),\n      peg$c30 = function(ds) { return ds.join(\"\"); },\n      peg$c31 = function(f) { return f.join(\"\"); },\n      peg$c32 = function(d) { return d.join(\"\"); },\n      peg$c33 = peg$otherExpectation(\"fractionalConstant\"),\n      peg$c34 = \".\",\n      peg$c35 = peg$literalExpectation(\".\", false),\n      peg$c36 = function(d1, d2) { return [d1 ? d1.join(\"\") : null, \".\", d2.join(\"\")].join(\"\"); },\n      peg$c37 = /^[eE]/,\n      peg$c38 = peg$classExpectation([\"e\", \"E\"], false, false),\n      peg$c39 = function(e) { return [e[0], e[1], e[2].join(\"\")].join(\"\"); },\n      peg$c40 = /^[+\\-]/,\n      peg$c41 = peg$classExpectation([\"+\", \"-\"], false, false),\n      peg$c42 = /^[0-9]/,\n      peg$c43 = peg$classExpectation([[\"0\", \"9\"]], false, false),\n      peg$c44 = /^[ \\t\\r\\n]/,\n      peg$c45 = peg$classExpectation([\" \", \"\\t\", \"\\r\", \"\\n\"], false, false),\n\n      peg$currPos          = 0,\n      peg$savedPos         = 0,\n      peg$posDetailsCache  = [{ line: 1, column: 1 }],\n      peg$maxFailPos       = 0,\n      peg$maxFailExpected  = [],\n      peg$silentFails      = 0,\n\n      peg$result;\n\n  if (\"startRule\" in options) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text() {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location() {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location\n    );\n  }\n\n  function error(message, location) {\n    location = location !== void 0 ? location : peg$computeLocation(peg$savedPos, peg$currPos)\n\n    throw peg$buildSimpleError(message, location);\n  }\n\n  function peg$literalExpectation(text, ignoreCase) {\n    return { type: \"literal\", text: text, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts, inverted, ignoreCase) {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation() {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation() {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description) {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos) {\n    var details = peg$posDetailsCache[pos], p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line:   details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos, endPos) {\n    var startPosDetails = peg$computePosDetails(startPos),\n        endPosDetails   = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line:   startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line:   endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected);\n  }\n\n  function peg$buildSimpleError(message, location) {\n    return new peg$SyntaxError(message, null, null, location);\n  }\n\n  function peg$buildStructuredError(expected, found, location) {\n    return new peg$SyntaxError(\n      peg$SyntaxError.buildMessage(expected, found),\n      expected,\n      found,\n      location\n    );\n  }\n\n  function peg$parsetransformList() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsewsp();\n    while (s2 !== peg$FAILED) {\n      s1.push(s2);\n      s2 = peg$parsewsp();\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsetransforms();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsewsp();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsewsp();\n        }\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c0(s2);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetransforms() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$parsetransform();\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsecommaWsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsecommaWsp();\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsetransforms();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c1(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsetransform();\n    }\n\n    return s0;\n  }\n\n  function peg$parsetransform() {\n    var s0;\n\n    s0 = peg$parsematrix();\n    if (s0 === peg$FAILED) {\n      s0 = peg$parsetranslate();\n      if (s0 === peg$FAILED) {\n        s0 = peg$parsescale();\n        if (s0 === peg$FAILED) {\n          s0 = peg$parserotate();\n          if (s0 === peg$FAILED) {\n            s0 = peg$parseskewX();\n            if (s0 === peg$FAILED) {\n              s0 = peg$parseskewY();\n            }\n          }\n        }\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsematrix() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6) === peg$c2) {\n      s1 = peg$c2;\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c3); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecommaWsp();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parsenumber();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsecommaWsp();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parsenumber();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsecommaWsp();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parsenumber();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parsecommaWsp();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parsenumber();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parsecommaWsp();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parsenumber();\n                                if (s15 !== peg$FAILED) {\n                                  s16 = [];\n                                  s17 = peg$parsewsp();\n                                  while (s17 !== peg$FAILED) {\n                                    s16.push(s17);\n                                    s17 = peg$parsewsp();\n                                  }\n                                  if (s16 !== peg$FAILED) {\n                                    if (input.charCodeAt(peg$currPos) === 41) {\n                                      s17 = peg$c6;\n                                      peg$currPos++;\n                                    } else {\n                                      s17 = peg$FAILED;\n                                      if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                                    }\n                                    if (s17 !== peg$FAILED) {\n                                      peg$savedPos = s0;\n                                      s1 = peg$c8(s5, s7, s9, s11, s13, s15);\n                                      s0 = s1;\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsetranslate() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 9) === peg$c9) {\n      s1 = peg$c9;\n      peg$currPos += 9;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c10); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecommaWspNumber();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$parsewsp();\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parsewsp();\n                }\n                if (s7 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s8 = peg$c6;\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c11(s5, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsescale() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5) === peg$c12) {\n      s1 = peg$c12;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c13); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecommaWspNumber();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$parsewsp();\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parsewsp();\n                }\n                if (s7 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s8 = peg$c6;\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c14(s5, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parserotate() {\n    var s0, s1, s2, s3, s4, s5, s6, s7, s8;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 6) === peg$c15) {\n      s1 = peg$c15;\n      peg$currPos += 6;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c16); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parsecommaWspTwoNumbers();\n              if (s6 === peg$FAILED) {\n                s6 = null;\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = [];\n                s8 = peg$parsewsp();\n                while (s8 !== peg$FAILED) {\n                  s7.push(s8);\n                  s8 = peg$parsewsp();\n                }\n                if (s7 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s8 = peg$c6;\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    peg$savedPos = s0;\n                    s1 = peg$c17(s5, s6);\n                    s0 = s1;\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseskewX() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5) === peg$c18) {\n      s1 = peg$c18;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c19); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$parsewsp();\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parsewsp();\n              }\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 41) {\n                  s7 = peg$c6;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c20(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parseskewY() {\n    var s0, s1, s2, s3, s4, s5, s6, s7;\n\n    s0 = peg$currPos;\n    if (input.substr(peg$currPos, 5) === peg$c21) {\n      s1 = peg$c21;\n      peg$currPos += 5;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c22); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = [];\n      s3 = peg$parsewsp();\n      while (s3 !== peg$FAILED) {\n        s2.push(s3);\n        s3 = peg$parsewsp();\n      }\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c4;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c5); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = [];\n          s5 = peg$parsewsp();\n          while (s5 !== peg$FAILED) {\n            s4.push(s5);\n            s5 = peg$parsewsp();\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parsenumber();\n            if (s5 !== peg$FAILED) {\n              s6 = [];\n              s7 = peg$parsewsp();\n              while (s7 !== peg$FAILED) {\n                s6.push(s7);\n                s7 = peg$parsewsp();\n              }\n              if (s6 !== peg$FAILED) {\n                if (input.charCodeAt(peg$currPos) === 41) {\n                  s7 = peg$c6;\n                  peg$currPos++;\n                } else {\n                  s7 = peg$FAILED;\n                  if (peg$silentFails === 0) { peg$fail(peg$c7); }\n                }\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c23(s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsenumber() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsesign();\n    if (s2 === peg$FAILED) {\n      s2 = null;\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsefloatingPointConstant();\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c24(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parsesign();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseintegerConstant();\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c25(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecommaWspNumber() {\n    var s0, s1, s2;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecommaWsp();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumber();\n      if (s2 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c26(s2);\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecommaWspTwoNumbers() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$parsecommaWsp();\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsenumber();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsecommaWsp();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parsenumber();\n          if (s4 !== peg$FAILED) {\n            peg$savedPos = s0;\n            s1 = peg$c27(s2, s4);\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsecommaWsp() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = [];\n    s2 = peg$parsewsp();\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        s2 = peg$parsewsp();\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parsecomma();\n      if (s2 === peg$FAILED) {\n        s2 = null;\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        s4 = peg$parsewsp();\n        while (s4 !== peg$FAILED) {\n          s3.push(s4);\n          s4 = peg$parsewsp();\n        }\n        if (s3 !== peg$FAILED) {\n          s1 = [s1, s2, s3];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsecomma();\n      if (s1 !== peg$FAILED) {\n        s2 = [];\n        s3 = peg$parsewsp();\n        while (s3 !== peg$FAILED) {\n          s2.push(s3);\n          s3 = peg$parsewsp();\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    return s0;\n  }\n\n  function peg$parsecomma() {\n    var s0;\n\n    if (input.charCodeAt(peg$currPos) === 44) {\n      s0 = peg$c28;\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c29); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseintegerConstant() {\n    var s0, s1;\n\n    s0 = peg$currPos;\n    s1 = peg$parsedigitSequence();\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c30(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsefloatingPointConstant() {\n    var s0, s1, s2, s3;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    s2 = peg$parsefractionalConstant();\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseexponent();\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n      if (s3 !== peg$FAILED) {\n        s2 = [s2, s3];\n        s1 = s2;\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c31(s1);\n    }\n    s0 = s1;\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$currPos;\n      s2 = peg$parsedigitSequence();\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseexponent();\n        if (s3 !== peg$FAILED) {\n          s2 = [s2, s3];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 !== peg$FAILED) {\n        peg$savedPos = s0;\n        s1 = peg$c32(s1);\n      }\n      s0 = s1;\n    }\n\n    return s0;\n  }\n\n  function peg$parsefractionalConstant() {\n    var s0, s1, s2, s3;\n\n    peg$silentFails++;\n    s0 = peg$currPos;\n    s1 = peg$parsedigitSequence();\n    if (s1 === peg$FAILED) {\n      s1 = null;\n    }\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 46) {\n        s2 = peg$c34;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c35); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parsedigitSequence();\n        if (s3 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c36(s1, s3);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parsedigitSequence();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 46) {\n          s2 = peg$c34;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c35); }\n        }\n        if (s2 !== peg$FAILED) {\n          peg$savedPos = s0;\n          s1 = peg$c32(s1);\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c33); }\n    }\n\n    return s0;\n  }\n\n  function peg$parseexponent() {\n    var s0, s1, s2, s3, s4;\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (peg$c37.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c38); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parsesign();\n      if (s3 === peg$FAILED) {\n        s3 = null;\n      }\n      if (s3 !== peg$FAILED) {\n        s4 = peg$parsedigitSequence();\n        if (s4 !== peg$FAILED) {\n          s2 = [s2, s3, s4];\n          s1 = s2;\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c39(s1);\n    }\n    s0 = s1;\n\n    return s0;\n  }\n\n  function peg$parsesign() {\n    var s0;\n\n    if (peg$c40.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c41); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigitSequence() {\n    var s0, s1;\n\n    s0 = [];\n    s1 = peg$parsedigit();\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        s1 = peg$parsedigit();\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n\n    return s0;\n  }\n\n  function peg$parsedigit() {\n    var s0;\n\n    if (peg$c42.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c43); }\n    }\n\n    return s0;\n  }\n\n  function peg$parsewsp() {\n    var s0;\n\n    if (peg$c44.test(input.charAt(peg$currPos))) {\n      s0 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s0 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c45); }\n    }\n\n    return s0;\n  }\n\n\n      var deg2rad = Math.PI / 180;\n\n      /*\n       ╔═        ═╗   ╔═        ═╗   ╔═     ═╗\n       ║ al cl el ║   ║ ar cr er ║   ║ a c e ║\n       ║ bl dl fl ║ * ║ br dr fr ║ = ║ b d f ║\n       ║ 0  0  1  ║   ║ 0  0  1  ║   ║ 0 0 1 ║\n       ╚═        ═╝   ╚═        ═╝   ╚═     ═╝\n      */\n      function multiply_matrices(l, r) {\n          var al = l[0];\n          var cl = l[1];\n          var el = l[2];\n          var bl = l[3];\n          var dl = l[4];\n          var fl = l[5];\n\n          var ar = r[0];\n          var cr = r[1];\n          var er = r[2];\n          var br = r[3];\n          var dr = r[4];\n          var fr = r[5];\n\n          var a = al * ar + cl * br;\n          var c = al * cr + cl * dr;\n          var e = al * er + cl * fr + el;\n          var b = bl * ar + dl * br;\n          var d = bl * cr + dl * dr;\n          var f = bl * er + dl * fr + fl;\n\n          return [a, c, e, b, d, f];\n      }\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nmodule.exports = {\n  SyntaxError: peg$SyntaxError,\n  parse:       peg$parse\n};\n"]},"metadata":{},"sourceType":"script"}